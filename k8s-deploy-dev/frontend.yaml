apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: monsterstack
spec:
  ports:
    - port: 5000
  selector:
    app: monsterstack
    partie: frontend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: monsterstack
spec:
  selector:
    matchLabels:
      app: monsterstack
      partie: frontend
  strategy:
    type: RollingUpdate
  replicas: 5
  template:
    metadata:
      labels:
        app: monsterstack
        partie: frontend
    spec:
      # imagePullSecrets:
      #   - name: registry-credential # registry login secret to create in the cluster with
      #   # kubectl create secret docker-registry registry-credential --docker-server=<registryhost> --docker-username=<username> --docker-password=<thepasspword>
      containers:
      - name: frontend
        image: docker.io/tecpi/frontend
        ports:
        - containerPort: 5000
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5000
            httpHeaders:
            - name: Accept
              value: application/json
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 10
          failureThreshold: 3
        env:
        - name: CONTEXT
          value: PROD
        - name: REDIS_DOMAIN
          value: redis
        - name: IMAGEBACKEND_DOMAIN
          value: imagebackend
        resources:
          requests:
            cpu: "50m"
            memory: "50Mi"
          limits:
            cpu: "150m"
            memory: "100Mi"